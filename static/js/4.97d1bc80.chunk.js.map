{"version":3,"sources":["Map.js"],"names":["RouteMap","_this","Object","_home_travis_build_Arquisoft_viade_es2b_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_travis_build_Arquisoft_viade_es2b_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_Arquisoft_viade_es2b_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","lat","lng","zoom","prevProps","props","gpx","updateMap","parse","filePath","_this2","refs","mapInstance","leafletElement","eachLayer","layer","removeLayer","L","tileLayer","addTo","track","GPX","async","polyline_options","color","opacity","weight","lineCap","marker_options","wptIcons","Triangle","Icon","iconUrl","Circle","Square","Pin","Flag","pointMatchers","regex","icon","startIconUrl","endIconUrl","shadowUrl","gpx_options","parseElements","joinTrackSegments","on","e","point","bindPopup","element","getElementsByTagName","innerHTML","console","log","target","fitBounds","getBounds","control","layers","dragging","disable","enable","position","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_leaflet__WEBPACK_IMPORTED_MODULE_6__","center","ref","react_leaflet__WEBPACK_IMPORTED_MODULE_7__","attribution","url","React","Component"],"mappings":"uOAIqBA,cAEnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,IAAK,OACLC,KAAM,IACNC,KAAM,IALIV,kFASKW,GAEbR,KAAKS,MAAMC,KAAOV,KAAKS,MAAMC,MAAQF,EAAUE,KAAKV,KAAKW,gDAK7DX,KAAKY,MAAMZ,KAAKS,MAAMC,mCAMjBG,GAAU,IAAAC,EAAAd,KAE8B,OAAzCA,KAAKe,KAAKC,YAAYC,gBACxBjB,KAAKe,KAAKC,YAAYC,eAAeC,UAAU,SAACC,GAAWL,EAAKC,KAAKC,YAAYC,eAAeG,YAAYD,KAG9GE,IAAEC,UAAU,qDAAqDC,MAAMvB,KAAKe,KAAKC,YAAYC,gBAE7F,IAAIO,EAAQ,IAAIH,IAAEI,IAAIZ,EAAU,CAC5Ba,OAAO,EACPC,iBAAkB,CAChBC,MAAO,QACPC,QAAS,IACTC,OAAQ,EACRC,QAAS,SAEXC,eAAgB,CACdC,SAAU,CACNC,SAAY,IAAIb,IAAEc,KAAK,CACrBC,QAAS,qBAEXC,OAAU,IAAIhB,IAAEc,KAAK,CACnBC,QAAS,mBAEXE,OAAU,IAAIjB,IAAEc,KAAK,CACnBC,QAAS,mBAEXG,IAAO,IAAIlB,IAAEc,KAAK,CAChBC,QAAS,gBAEXI,KAAQ,IAAInB,IAAEc,KAAK,CACjBC,QAAS,kBAGfK,cAAe,CACb,CACEC,MAAO,OACPC,KAAM,IAAItB,IAAEc,KAAK,CACfC,QAAS,kBAIfQ,aAAc,yEACdC,WAAc,uEACdC,UAAc,sEAEhBC,YAAa,CACXC,cAAe,CAAC,QAAS,QAAS,YAClCC,mBAAmB,KAGpBC,GAAG,WAAY,SAASC,GACZA,EAAEC,MACRC,UAAUF,EAAEG,QAAQC,qBAAqB,QAAQ,GAAGC,WAC3DC,QAAQC,IAAIP,EAAEG,QAAQC,qBAAqB,QAAQ,GAAGC,aACrDN,GAAG,SAAW,SAACC,GAAO,IAAIzC,EAAMyC,EAAEQ,OACZ7C,EAAKC,KAAKC,YAAYC,eAAe2C,UAAUlD,EAAImD,eAClDtC,MAAMvB,KAAKe,KAAKC,YAAYC,gBAExDI,IAAEyC,QAAQC,OAAO,GAAI,CAACtC,IAAMD,IAAQD,MAAMvB,KAAKe,KAAKC,YAAYC,gBAChEjB,KAAKe,KAAKC,YAAYC,eAAe+C,SAASC,UAC9CjE,KAAKe,KAAKC,YAAYC,eAAe+C,SAASE,0CAI9C,IAAMC,EAAW,CAACnE,KAAKI,MAAMC,IAAKL,KAAKI,MAAME,KAC7C,OACE8D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,OAAQL,EAAU5D,KAAMP,KAAKI,MAAMG,KAAMkE,IAAM,eAClDL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,qDA9FwBC,IAAMC","file":"static/js/4.97d1bc80.chunk.js","sourcesContent":["import React from 'react'\nimport { Map, TileLayer } from 'react-leaflet'\nimport L from 'leaflet-gpx';\n\nexport default class RouteMap extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      lat: 51.505,\n      lng: -0.09,\n      zoom: 13\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n\n    if (this.props.gpx && this.props.gpx !== prevProps.gpx) this.updateMap();\n\n  }\n\n  updateMap() {\n    this.parse(this.props.gpx);\n\n    //IMPLEMENTAR CARGA DEL MAPA\n\n  }\n  \n  parse (filePath) {\n\n    if (this.refs.mapInstance.leafletElement !== null) {\n      this.refs.mapInstance.leafletElement.eachLayer((layer) => {this.refs.mapInstance.leafletElement.removeLayer(layer);});\n    }\n\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(this.refs.mapInstance.leafletElement);\n\n    var track = new L.GPX(filePath, {\n        async: true,\n        polyline_options: {\n          color: 'green',\n          opacity: 0.75,\n          weight: 3,\n          lineCap: 'round'\n        },\n        marker_options: {\n          wptIcons: {\n              'Triangle': new L.Icon({\n                iconUrl: 'img/triangle.png'\n              }),\n              'Circle': new L.Icon({\n                iconUrl: 'img/circle.png'\n              }),\n              'Square': new L.Icon({\n                iconUrl: 'img/square.png'\n              }),\n              'Pin': new L.Icon({\n                iconUrl: 'img/pin.png'\n              }),\n              'Flag': new L.Icon({\n                iconUrl: 'img/flag.png'\n              })\n          },\n          pointMatchers: [\n            {\n              regex: /.\\*?/,\n              icon: new L.Icon({\n                iconUrl: 'img/pin.png'\n              })\n            }\n          ],\n          startIconUrl: 'http://github.com/mpetazzoni/leaflet-gpx/raw/master/pin-icon-start.png',\n          endIconUrl:   'http://github.com/mpetazzoni/leaflet-gpx/raw/master/pin-icon-end.png',\n          shadowUrl:    'http://github.com/mpetazzoni/leaflet-gpx/raw/master/pin-shadow.png',\n        },\n        gpx_options: {\n          parseElements: ['track', 'route', 'waypoint'],\n          joinTrackSegments: false\n        },\n        \n      }).on('addpoint', function(e) {\n        var marker = e.point;\n        marker.bindPopup(e.element.getElementsByTagName('name')[0].innerHTML);\n        console.log(e.element.getElementsByTagName('name')[0].innerHTML)\n      }).on('loaded', ((e) => {var gpx = e.target;\n                               this.refs.mapInstance.leafletElement.fitBounds(gpx.getBounds());}))\n                               .addTo(this.refs.mapInstance.leafletElement);\n\n    L.control.layers({}, {'GPX':track}).addTo(this.refs.mapInstance.leafletElement);\n    this.refs.mapInstance.leafletElement.dragging.disable();\n    this.refs.mapInstance.leafletElement.dragging.enable();\n}\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n      <Map center={position} zoom={this.state.zoom} ref = 'mapInstance'>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n        />\n      </Map>\n    );\n  }\n}"],"sourceRoot":""}